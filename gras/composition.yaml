apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: gras.grsf.grpl.io
  labels:
    crossplane.io/xrd: compositegrappleapplicationsets.grsf.grpl.io
    provider: gras
spec:
  # writeConnectionSecretsToNamespace: grpl-system
  compositeTypeRef:
    apiVersion: grsf.grpl.io/v1alpha1
    kind: CompositeGrappleApplicationSet
  resources:
    - base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        metadata:
          annotations: 
            crossplane.io/external-name: # patched
        spec:
          forProvider:
            chart:
              name: gras
              repository: oci://public.ecr.aws/p7h7z5g3
              version: 0.2.4
            namespace: # patched
            values:
              name: # patched
              asname: ""
              grasversion: # patched
              grapis: []
              gruims: []
            # set: 
            #   - name: externalDatabase.host
            #     valueFrom: 
            #       secretKeyRef: 
            #         name: 
            #         namespace: grpl-system
            #         key: endpoint
            #   - name: externalDatabase.user
            #     valueFrom: 
            #       secretKeyRef: 
            #         name: 
            #         namespace: grpl-system
            #         key: username
            #   - name: externalDatabase.password
            #     valueFrom: 
            #       secretKeyRef: 
            #         name: 
            #         namespace: grpl-system
            #         key: password
          writeConnectionSecretsToRef: 
            namespace: grpl-test
            name: myrelease-secret
          providerConfigRef: 
            # name: providerconfigs.helm.crossplane.io/helm-provider-config
            name: helm-provider-config
      patches:
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.forProvider.namespace
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.claimRef.name
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          policy:
            fromFieldPath: Required
          transforms:
            - type: string
              string:
                fmt: "%s-gras"
        - fromFieldPath: spec.claimRef.name
          toFieldPath: spec.forProvider.values.name
          policy:
            fromFieldPath: Required
          transforms:
            - type: string
              string:
                fmt: "%s-gras"
        - fromFieldPath: spec.claimRef.name
          toFieldPath: spec.forProvider.values.asname
        - fromFieldPath: spec.grasversion
          toFieldPath: spec.forProvider.values.grasversion
        - fromFieldPath: spec.customheader
          toFieldPath: spec.forProvider.values.customheader
        - fromFieldPath: spec.autoscaling
          toFieldPath: spec.forProvider.values.autoscaling
        - fromFieldPath: spec.resources.resourcesNpmMem
          toFieldPath: spec.forProvider.values.resourcesNpmMem
        - fromFieldPath: spec.resources.runimages.spec
          toFieldPath: spec.forProvider.values.resources.runimages.spec
        - fromFieldPath: spec.resources.deployimages.spec
          toFieldPath: spec.forProvider.values.resources.deployimages.spec
        - fromFieldPath: spec.dev
          toFieldPath: spec.forProvider.values.dev
        - fromFieldPath: spec.grapis
          toFieldPath: spec.forProvider.values.grapis
        - fromFieldPath: spec.gruims
          toFieldPath: spec.forProvider.values.gruims


        # - fromFieldPath: spec.clusterdomain
        #   toFieldPath: spec.forProvider.values.clusterdomain
        # - fromFieldPath: spec.ingress
        #   toFieldPath: spec.forProvider.values.ingress
        # - fromFieldPath: spec.ssl
        #   toFieldPath: spec.forProvider.values.ssl
        # - fromFieldPath: spec.sslissuer
        #   toFieldPath: spec.forProvider.values.sslissuer
        # - fromFieldPath: spec.sslissuer
        #   toFieldPath: spec.forProvider.values.sslissuer
        # - fromFieldPath: spec.buildimages
        #   toFieldPath: spec.forProvider.values.buildimages
        # - fromFieldPath: spec.buildimagecache
        #   toFieldPath: spec.forProvider.values.buildimagecache
        # - fromFieldPath: spec.runimages
        #   toFieldPath: spec.forProvider.values.runimages
        # - fromFieldPath: spec.deployimages
        #   toFieldPath: spec.forProvider.values.deployimages
        # - fromFieldPath: spec.imagetag
        #   toFieldPath: spec.forProvider.values.imagetag
        # - fromFieldPath: spec.beimage
        #   toFieldPath: spec.forProvider.values.beimage


        # does it work, if this is disabled?
        # - fromFieldPath: spec.claimRef.beimagetag
        #   toFieldPath: spec.forProvider.values.beimagetag
        # - fromFieldPath: spec.cacheconfigs
        #   toFieldPath: spec.forProvider.values.cacheconfigs
        # - fromFieldPath: spec.fuzzysearch
        #   toFieldPath: spec.forProvider.values.fuzzysearch


        # - fromFieldPath: spec.translations
        #   toFieldPath: spec.forProvider.values.translations
        # - fromFieldPath: spec.apiregistry
        #   toFieldPath: spec.forProvider.values.apiregistry
        # - fromFieldPath: spec.graphql
        #   toFieldPath: spec.forProvider.values.graphql
        # - fromFieldPath: spec.monitoring
        #   toFieldPath: spec.forProvider.values.monitoring
        # - fromFieldPath: spec.discoveredrepos
        #   toFieldPath: spec.forProvider.values.discoveredrepos
        # - fromFieldPath: spec.externalsecrets
        #   toFieldPath: spec.forProvider.values.externalsecrets

        # - fromFieldPath: spec.datasources
        #   toFieldPath: spec.forProvider.values.datasources
        # - fromFieldPath: spec.discoveries
        #   toFieldPath: spec.forProvider.values.discoveries
        # - fromFieldPath: spec.models
        #   toFieldPath: spec.forProvider.values.models
        # - fromFieldPath: spec.relations
        #   toFieldPath: spec.forProvider.values.relations
        # - fromFieldPath: spec.serviceproviders
        #   toFieldPath: spec.forProvider.values.serviceproviders
        # - fromFieldPath: spec.openapis
        #   toFieldPath: spec.forProvider.values.openapis
        # - fromFieldPath: spec.restcruds
        #   toFieldPath: spec.forProvider.values.restcruds
        # - fromFieldPath: spec.repositories
        #   toFieldPath: spec.forProvider.values.repositories
        # - fromFieldPath: spec.controllers
        #   toFieldPath: spec.forProvider.values.controllers
        # - fromFieldPath: spec.patches
        #   toFieldPath: spec.forProvider.values.patches


    # - base:
    #     apiVersion: kubernetes.crossplane.io/v1alpha1
    #     kind: Object
    #     spec:
    #       forProvider:
    #         manifest:
    #           apiVersion: v1
    #           kind: Pod
    #           metadata:
    #             name: mypod
    #             namespace: grpl-test
    #           spec:
    #             containers:
    #             - image: nginx:latest
    #               name: mypod
    #       writeConnectionSecretsToRef: 
    #         namespace: grpl-test
    #         name: mypod-secret
    #       providerConfigRef: 
    #         # name: providerconfigs.kubernetes.crossplane.io/kubernetes-provider
    #         name: kubernetes-provider
    #   patches:
    #     - fromFieldPath: metadata.namespace
    #       toFieldPath: metadata.namespace
